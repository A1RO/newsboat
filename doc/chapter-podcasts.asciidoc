A podcast is a media file distributed over the internet using syndication feeds
such as RSS, for later playback on portable players or computers.  Newsboat
contains support for downloading and saving podcasts. This support differs a bit
from other podcast aggregators or "podcatchers" in how it is done.

Podcast content is transported in RSS feeds via special tags called
"enclosures". Newsboat recognizes these enclosures and stores the relevant
information for every podcast item it finds in an RSS feed. Since version 2.0,
it also recognizes and handles the Yahoo Media RSS extensions. What the user
then can do is to add the podcast download URL to a download queue.
Alternatively, newsboat can be configured to automatically do that. This
queue is stored in the _queue_ file next to the _cache.db_ file.

The user can then use the download manager `podboat` to download these files
to a directory on the local filesystem. Podboat comes with the newsboat
package, and features a look and feel very close to the one of newsboat. It
also shares the same configuration file.

Podcasts that have been downloaded but haven't been played yet remain in the
queue but are marked as downloaded. You can remove them by purging them from
the queue with the "P" key. After you've played a file and close podboat, it
will be removed from the queue. The downloaded file remains on the
filesystem unless "delete-played-files" is enabled.

A usual "use case" is to configure newsboat to automatically enqueue newly
found podcast download URLs. Then, the user reloads the podcast RSS feeds in
newsboat, and after that, uses podboat to view the current queue, and
either selectively download certain files or automatically download them all
together by pressing "a" within podboat.

You can even use this feature to enqueue any of the URLs from the URLs view to
podboat's download queue (which might be in _~/.locale/share/newsboat/queue_ if
you're using XDG directories):

  macro E set browser "echo %u >> ~/.newsboat/queue"; open-in-browser; set browser "elinks %u"

=== Media Content

Since articles can link to various media content such as _audio_, _video_ and _images_, you may want to open those files with a dedicated application instead of a web browser.

As an alternative to Podboat, media players such as `mpv` can stream content directly when given a URL as an argument. For podcasts, Newsboat always assign the main audio file to link [1]. Using the technique described in <<_macro_support,Macro Support>>, a specific link can be opened with the command of your choice, right from the article view (no need to reach for the URL view for this task). Instead of calling `open-in-browser`, the operations `one` to `zero` (numbers written textually) can be used to specify _which_ link to open.

So, to stream a podcast from the article view, you can use a macro such as:

```
macro 1 set browser mpv; one; set browser firefox
```

While listening, you might also want to keep using newsboat at the same time. There are many ways to achieve that. One of them is described in the link:faq.html#_after_i_open_a_link_in_the_browser_newsboat_stays_unresponsive_until_the_browser_is_closed[FAQ], another is to add `setsid -f` at the beginning of the command to fork the external application to a new process, independant of Newsboat. In addition to that, you probably want to open the media player in a dedicated terminal. The following macro does just that:

```
macro p set browser "setsid -f alacritty -e mpv"; one; set browser "firefox"
```

Of course, `setsid` and `alacritty` need to be installed on your machine. You can replace `alacritty` with your preferred terminal emulator, as long as the option to execute a command after launching the terminal (`-e` in this case) is set.

Given the text-based user interface of Newsboat, one can even use it to stream audio content on a system without a graphical environment. Just make sure your audio player does not try to launch a GUI. For example:

```
macro c set browser "mpv --vid=no"; one; set browser "firefox"
```
